I/O重定向
0 stdin; 1 stdout; 2 stderr;

$ program > output_file.txt 2>&1
$ program 2>&1 | filter
2>&1 stderr合并到stdin


stdout is buffered.Data written to stdout is not sent to console(or other device ,if it's redirected) until the buffer fills.
	fflush(stdout);

stderr is not buffered.Data written to stderr goes directly to the console.

C++,对cout,cerr也一样,可以使用newline '\n',刷新,或直接flush steam

while (1) { //不是每秒输出一次,buffer满后一次性输出
	printf (".");
	sleep (1);
}

while (1) { //每秒输出一次
	fprintf (stderr, ".");
	sleep (1);
}


$? 上一个程序的退出码
$ echo $?


mkstemp创建的temporary files不会被自动删除, 由程序员自行删除
可以使用mkstemp创建temporary filles,后立即使用unlink()去除对应文件的目录入口,
一旦关闭了文件描述符(file descriptor),文件会被自动删除.
即使不关闭文件,系统也会在程序关闭时关闭文件描述符,即使程序是不正常退出.



<errno.h>  errno
<string.h>  strerror 
	returns a character string description of an errno error code,suitable for use in error messages.
<stdio.h>  perror
	prints the error description directly to the stderr stream.


fd = open ("inputfile.txt", O_RDONLY);
if (fd == -1) {
	/* The open failed. print an error message and exit. */
	fprintf (stderr, "error opening file: %s\n", stderror (errno));
	exit(0);
}


错误检测示例代码:

rval = chown (path, user_id, -1);
if (rval != 0) {
	/* Save errno because it's clobbered by the next system call. */
	int errno_code = errno;
	/* The operation didn't succeed; chown should return -1 on error. */
	assert (rval == -1);
	/* Check the value of errno, and take appropriate action. */
	switch (errno_code) {
	case EPERM:		/* Permission denied. */
	case EROFS:		/* PATH is on a read-only file system. */
	case ENAMETOOLONG:	/* PATH is too long. */
	case ENOENT:		/* PATH does not exist. */
	case ENOTDIR:		/* A component of PATH is not a directory. */
	case EACCES:		/* A component of PATH is not accessible. */
		/* Something's wrong with the file. Print an error message. */
		fprintf (stderr, "error changing ownership of %s: %s\n",
		path, strerror(errno_code));
	/* Don't end the program; perhaps give the user a chance to choose
	 * another file...  */
		break;
	
	case EFAULT:
	/* PATH contains an invaild memory address. This is probably a bug. */
		abort ();
	
	case ENOMEM:
		/* Ran out of kernel memory.  */
		fprintf (stderr, "%s\n", stderror (errno_code));
		exit (1);
	
	default:
	/* Some other, unexpected, error code. We've teried to handle
	 * all possible error codes; if we've missed one, that's a bug. */
		abort ();
	};
}



simple example:

rval = chown (path, user_id, -1);
assert (rval == 0);



$ gcc -o libtest.o -c test.c
$ ar cr libtest.a libtest.o
$ gcc -o app.o -c app.c

$ gcc -o app -L. -ltest app.o
app.o: In function `main':
app.c:(.text+0x7): undefined reference to `f'
collect2: error: ld returned 1 exit status

库编译进最终执行文件
$ gcc -o app app.o -L. -ltest
$ ./app
$ echo $?
3


Position-Independent Code (PIC)

使用test1.c作为共享库(shared object)的一部分
$ gcc -c -fPIC test1.c

合并objects生成共享库文件libtest.so
$ gcc -shared -fPIC -o libtest.so test1.o test2.o

链接共享库生成最终执行文件
$ gcc -o app app.o -L. -ltest

当目录同时存在libtest.so与libtest.a时,选择shared library version
当使用-static时,使用libtest.a
$ gcc -static -o app app.o -L. -ltest

增加搜索目录
$ gcc -o app app.o -L. -ltest -Wl,-rpath,/usr/local/lib

$ gcc -o compute compute.c -lm


$ cd p61-library
$ ldd app
	linux-gate.so.1 =>  (0xb77da000)
	libc.so.6 => /lib/i386-linux-gnu/i686/cmov/libc.so.6 (0xb7660000)
	/lib/ld-linux.so.2 (0xb77db000)



运行时载入共享库
<dlfcn.h>
linked with -ldl

void* handle = dlopen ("libtest.so", RTLD_LAZY);
void (*test)() = dlsym (handle, "my_function");
(*test)();
dlclose (handle);


C++中
extern "C" void foo ();
防止函数解释成something else



exec

有p(execvp, execlp)使用程序名寻找程序,而非使用绝对路径
有v(execv, execvp, execve)字符串参数,类似于
	char * arg_list[] = { "ls", "-l", "/", NULL};
	execvp (program_name, arg_list);
有l(execl, execlp, execle)类命令行参数
有e(execve, execle)接受额外的环境变量


niceness值越大,优先级越低

detached thread 会被自动clean up
而默认创建的joinable thread 会一直挂起,直到another thread call pthread_join()


p106/368
error-checking mutex, example:

pthread_mutexattr_t attr;
pthread_mutex_t mutex;

pthread_mutexattr_init (&attr);
pthread_mutex_setkind_np (&attr, PTHREAD_MUTEX_ERRORCHECK_NP);
pthread_mutex_init (&mutex, &attr);
pthread_mutexattr_destroy (&attr);


